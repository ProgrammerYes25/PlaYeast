<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.hs.study.PlaYeast.Mappers.PlaYeastMapper">

    <resultMap id="musicResultMap" type="kr.hs.study.PlaYeast.DTO.RollupDTO">
        <result property="musicArtist" column="music_artist" />
        <result property="count" column="count" />
        <result property="sumMusicTime" column="sumMusicTime" />
    </resultMap>

    <insert id="musicInsert" parameterType="kr.hs.study.PlaYeast.DTO.MusicDTO">
        INSERT INTO music_table(music_id, music_name, music_artist, music_album, music_time, music_track, genre_id, mood_id, weather_id)
        VALUES(NULL, #{music_name}, #{music_artist}, #{music_album}, #{music_time}, #{music_track}, #{genre_id}, #{mood_id}, #{weather_id})
    </insert>

    <update id="musicUpdate" parameterType="kr.hs.study.PlaYeast.DTO.MusicDTO">
        UPDATE music_table SET music_name=#{music_name}, music_artist = #{music_artist},
                        music_album = #{music_album}, music_time= #{music_time}, music_track=#{music_track},
                        genre_id = #{genre_id}, mood_id = #{mood_id}, weather_id = #{weather_id} WHERE music_id = #{music_id}
    </update>

    <select id="allSelect" resultType="kr.hs.study.PlaYeast.DTO.MusicDTO">
        SELECT music.music_id, music.music_track, music.music_name, music.music_artist, music.music_album, genre.genre_name, mood.mood_name, weather.weather_name
        FROM music_table music NATURAL JOIN genre_table genre NATURAL JOIN weather_table weather NATURAL JOIN mood_table mood
        ORDER BY music.music_artist, music.music_album, music.music_track
    </select>
    <select id="nameSelect" parameterType="kr.hs.study.PlaYeast.DTO.SearchDTO" resultType="kr.hs.study.PlaYeast.DTO.MusicDTO">
        SELECT music_id, music_track, music_name, music_artist, music_album, genre_name, mood_name, weather_name
        FROM (SELECT music.music_id, music.music_track,  music.music_name, REGEXP_REPLACE(LOWER( music.music_name), '\s', ''),
        music.music_artist, REGEXP_REPLACE(LOWER( music.music_artist), '\s', ''),
        music.music_album, REGEXP_REPLACE(LOWER( music.music_album), '\s', ''), genre.genre_name, mood.mood_name, weather.weather_name
        FROM music_table  music  NATURAL JOIN genre_table genre NATURAL JOIN weather_table weather NATURAL JOIN mood_table mood
        WHERE music_name LIKE '%'||#{name}||'%' OR music_artist LIKE '%'||#{name}||'%' OR music_album LIKE '%'||#{name}||'%')
        ORDER BY music_artist, music_album, music_track
    </select>
    <delete id="musicDelete" parameterType="int">
        DELETE FROM music_table WHERE music_id=#{id}
    </delete>

    <select id="musicGet" parameterType="int" resultType="kr.hs.study.PlaYeast.DTO.MusicDTO">
        SELECT * FROM music_table
        WHERE music_id=#{id}
    </select>

    <select id="rollupSelect" resultMap="musicResultMap">
        SELECT NVL(music_artist, '전체') music_artist, count(*) count, sum(music_time) sumMusicTime
        FROM music_table GROUP BY ROLLUP(music_artist)
        ORDER BY music_artist
    </select>

    <select id="rollupNameSelect" parameterType="kr.hs.study.PlaYeast.DTO.SearchDTO" resultMap="musicResultMap" >
        SELECT count(*) count, sum(music_time) sumMusicTime
        FROM (SELECT music.music_id, music.music_track,  music.music_name, REGEXP_REPLACE(LOWER( music.music_name), '\s', ''),
            music.music_artist, REGEXP_REPLACE(LOWER( music.music_artist), '\s', ''),
            music.music_album, REGEXP_REPLACE(LOWER( music.music_album), '\s', ''),
            genre.genre_name, mood.mood_name, weather.weather_name, music.music_time
            FROM music_table  music  NATURAL JOIN genre_table genre NATURAL JOIN weather_table weather NATURAL JOIN mood_table mood
            WHERE music_name LIKE '%'||#{name}||'%' OR music_artist LIKE '%'||#{name}||'%' OR music_album LIKE '%'||#{name}||'%')
        ORDER BY music_artist
    </select>
</mapper>